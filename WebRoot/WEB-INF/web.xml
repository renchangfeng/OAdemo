<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd" id="WebApp_ID" version="2.5">
     <display-name>BankOa</display-name>
      <!-- ==============Spring配置============== -->
   <!-- 
	    配置webAppRootKey的目的是因为项目中使用了org.springframework.web.util.Log4jConfigListener，
	    如果在同一个Tomcat中配置了多个使用了org.springframework.web.util.Log4jConfigListener的项目在不指定webAppRootKey时，会出现
	   Web app root system property already set to different value: 'webapp.root' = [D:\Project\Ajax7_SSHDemo\WebRoot\] instead of [D:\Project\Spring10_Spring2_Struts2_Hibernate3\WebRoot\] - Choose unique values for the 'webAppRootKey' context-param in your web.xml files!
	   原因就是每个项目如果采用默认配置，那么这些Log4j的配置文件都在默认的路径下，即默认的路径名相同，如果这时就必须为每个Log4j的配置文件起个名字，用于在Tomcat容器中区分每个项目中Log4j中的配置文件
	   一般这个名字可以设置为：当前项目的工程名
	   如果不使用：org.springframework.web.util.Log4jConfigListener，则可以不配置下面的代码：
     <context-param>
        <param-name>webAppRootKey</param-name>
        <param-value>BankOA</param-value>
     </context-param>
       
       区分ssm框架项目
  -->
  <context-param>
    <param-name>webAppRootKey</param-name>
    <param-value>BankOa</param-value>
  </context-param>
 
    <!-- 说明：配置log4j配置文件 -->
  <context-param>
	<param-name>log4jConfigLocation</param-name>
	<param-value>/WEB-INF/classes/log4j.properties</param-value>
  </context-param> 
  
  <!-- 
    * 配置contextConfigLocation属性
       * 该属性的作用是：指明Spring配置文件位置，当前位置为项目的classpath路径下
  -->
  <context-param>
     <param-name>contextConfigLocation</param-name>
     <param-value>classpath:applicationContext-*.xml</param-value>
  </context-param>
  
  <!-- 
    * 配置Spring的IOC容器，Web环境下的IOC对应的类为：ContextLoaderListener，该类采用监听器进行配置Listener，
    * 其中：ContextLoaderListener类会自动读取上面contextConfigLocation属性对应的Spring配置文件
  -->
  <listener>
       <listener-class>
          org.springframework.web.context.ContextLoaderListener
       </listener-class>
  </listener>
  
  <!-- 配置:Listener log4jConfigLocation组件，该组件会自动读取上面配置的log4j配置文件中的内容 -->
  <listener>
	<listener-class>
		org.springframework.web.util.Log4jConfigListener
	</listener-class>
  </listener>
  
  <!-- 配置RequestContextListener （可选），建议使用。-->
  <listener>
    <listener-class>
	   org.springframework.web.context.request.RequestContextListener
    </listener-class>
  </listener>
  
  <listener>
	  <listener-class>
		   org.springframework.web.util.IntrospectorCleanupListener
	  </listener-class>
  </listener>
  
  <listener>
	  <listener-class>com.listener.CustomInitPrivilegeListener</listener-class>
  </listener>
    <!-- 处理器类配置 -->
  <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>
              org.springframework.web.servlet.DispatcherServlet
        </servlet-class>
        <init-param>
               <param-name>contextConfigLocation</param-name>
               <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
  </servlet>
  
  
 <!-- RESTful支持 -->
  <servlet>
       <servlet-name>springmvc_RESTful</servlet-name>
       <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
       <init-param>
           <param-name>contextConfigLocation</param-name>
           <param-value>classpath:springmvc.xml</param-value>
       </init-param>
  </servlet>

  <servlet-mapping>
       <servlet-name>springmvc</servlet-name>
       <url-pattern>*.action</url-pattern>
  </servlet-mapping>
  
  <servlet-mapping>
       <servlet-name>springmvc_RESTful</servlet-name>
       <url-pattern>/</url-pattern>
  </servlet-mapping>
  
<!-- SpringMVC提供的POST提交方式的乱码解决 -->   
  <filter>
	 <filter-name>CharacterEncodingFilter</filter-name>
	 <filter-class>
	      org.springframework.web.filter.CharacterEncodingFilter
	 </filter-class>
	 <init-param>
	      <param-name>encoding</param-name>
	      <param-value>utf-8</param-value>
	 </init-param>
  </filter>
  <filter-mapping>
	  <filter-name>CharacterEncodingFilter</filter-name>
	  <url-pattern>/*</url-pattern>
  </filter-mapping> 
  
  
    <!-- Session超时配置 -->
  <session-config>
	   <session-timeout>3</session-timeout>
  </session-config>
	
  <!--
        错误页配置
        说明：开发时将以下配置注释掉，当项目部署应用时，可去掉注释。
   -->
  <!--   
  <error-page>
       <error-code>404</error-code>
       <location>/jsp/404error.jsp</location>
  </error-page>
  <error-page>
       <error-code>500</error-code>
       <location>/jsp/500error.jsp</location>
  </error-page>
  -->
  
 

  <welcome-file-list>
    <welcome-file>index.html</welcome-file>
    <welcome-file>index.htm</welcome-file>
    <welcome-file>index.jsp</welcome-file>
    <welcome-file>default.html</welcome-file>
    <welcome-file>default.htm</welcome-file>
    <welcome-file>login.jsp</welcome-file>
  </welcome-file-list>
</web-app>